{
  "info": {
    "name": "Mock Customer Engagement Platform API",
    "description": "API collection for testing the mock customer engagement platform endpoints",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5000/api",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        },
        "description": "Check the health status of the API"
      },
      "response": []
    },
    {
      "name": "Track Event - Login",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"user_id\": \"u001\",\n  \"action\": \"Login\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"properties\": {\n    \"source\": \"web\",\n    \"device\": \"desktop\"\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/event",
          "host": ["{{base_url}}"],
          "path": ["event"]
        },
        "description": "Track a user login event"
      },
      "response": []
    },
    {
      "name": "Track Event - Add to Cart",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"user_id\": \"u001\",\n  \"action\": \"AddToCart\",\n  \"timestamp\": \"2024-01-15T10:32:00Z\",\n  \"properties\": {\n    \"product_id\": \"p123\",\n    \"category\": \"electronics\",\n    \"price\": 299.99\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/event",
          "host": ["{{base_url}}"],
          "path": ["event"]
        },
        "description": "Track an add to cart event"
      },
      "response": []
    },
    {
      "name": "Track Event - Checkout",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"user_id\": \"u001\",\n  \"action\": \"Checkout\",\n  \"timestamp\": \"2024-01-15T10:35:00Z\",\n  \"properties\": {\n    \"order_id\": \"o456\",\n    \"total_amount\": 299.99,\n    \"payment_method\": \"credit_card\"\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/event",
          "host": ["{{base_url}}"],
          "path": ["event"]
        },
        "description": "Track a checkout completion event"
      },
      "response": []
    },
    {
      "name": "Get All Users",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/users",
          "host": ["{{base_url}}"],
          "path": ["users"]
        },
        "description": "Retrieve all users in the system"
      },
      "response": []
    },
    {
      "name": "Get Events (Paginated)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/events?page=1&per_page=10",
          "host": ["{{base_url}}"],
          "path": ["events"],
          "query": [
            {
              "key": "page",
              "value": "1"
            },
            {
              "key": "per_page",
              "value": "10"
            }
          ]
        },
        "description": "Get recent events with pagination"
      },
      "response": []
    },
    {
      "name": "Get Analytics Data",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/analytics",
          "host": ["{{base_url}}"],
          "path": ["analytics"]
        },
        "description": "Get aggregated analytics metrics"
      },
      "response": []
    },
    {
      "name": "Upload Users CSV",
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "file",
              "type": "file",
              "src": "/path/to/users.csv",
              "description": "CSV file with user data (user_id, name, email)"
            }
          ]
        },
        "url": {
          "raw": "{{base_url}}/upload",
          "host": ["{{base_url}}"],
          "path": ["upload"]
        },
        "description": "Upload user profiles via CSV file"
      },
      "response": []
    },
    {
      "name": "Track Event - Invalid User",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"user_id\": \"u999\",\n  \"action\": \"Login\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/event",
          "host": ["{{base_url}}"],
          "path": ["event"]
        },
        "description": "Test error handling with invalid user ID"
      },
      "response": []
    },
    {
      "name": "Track Event - Missing Fields",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"user_id\": \"u001\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/event",
          "host": ["{{base_url}}"],
          "path": ["event"]
        },
        "description": "Test validation with missing required fields"
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set timestamp for events",
          "pm.globals.set('timestamp', new Date().toISOString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Basic response validation",
          "pm.test('Status code is success', function () {",
          "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
          "});",
          "",
          "pm.test('Response has valid JSON', function () {",
          "    pm.response.to.have.jsonBody();",
          "});"
        ]
      }
    }
  ]
}